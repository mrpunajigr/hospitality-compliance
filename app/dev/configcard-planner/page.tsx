'use client';

import { useState, useEffect } from 'react';
import { getCardStyle, getTextStyle, getButtonStyle } from '@/lib/design-system';
import { getModuleConfig } from '@/lib/module-config';
import { ModuleHeader } from '@/app/components/ModuleHeader';

interface FieldPlan {
  id: string;
  purpose: string; // What information does this collect?
  label: string; // Display name
  fieldType: 'text' | 'number' | 'date' | 'choose-from-list' | 'yes-no' | 'long-text';
  required: boolean;
  useCase: string; // When would this be used?
  options?: string[]; // For choose-from-list
  defaultValue?: string;
  helpText?: string;
}

interface ConfigCardPlan {
  id: string;
  // Business Planning
  name: string; // ConfigCard name/title
  cardPurpose: string; // What is this ConfigCard for?
  description: string; // Business description
  module: 'ADMIN' | 'UPLOAD' | 'DIARY' | 'RECEIPE' | 'STOCK' | 'REPAIRS' | 'MENU' | 'STOCKTAKE'; // Which module/section
  moduleSection: string; // Which part/section within the module (e.g. "User Management", "Settings")
  securityLevel: 'low' | 'medium' | 'high'; // Security classification
  accessLevel: 'owner-only' | 'managers-and-owners' | 'all-staff'; // Who can access
  layoutPreference: 'simple-form' | 'two-columns' | 'grid-layout';
  userPermissions: 'view-only' | 'can-edit' | 'admin-control';
  
  // Field Planning
  fields: FieldPlan[];
  
  // Implementation (generated by Claude)
  implemented: boolean;
  generatedAt?: string;
  sqlGenerated?: boolean;
  configCardGenerated?: boolean;
}

export default function ConfigCardPlannerPage() {
  const [plans, setPlans] = useState<ConfigCardPlan[]>([]);
  const [editingPlan, setEditingPlan] = useState<ConfigCardPlan | null>(null);
  const [isNewPlan, setIsNewPlan] = useState(false);
  const [loading, setLoading] = useState(true);
  const [editingField, setEditingField] = useState<FieldPlan | null>(null);
  const [isNewField, setIsNewField] = useState(false);

  const moduleConfig = getModuleConfig('dev');

  useEffect(() => {
    loadPlans();
  }, []);

  const loadPlans = async () => {
    try {
      console.log('Loading ConfigCard plans...');
      // For now, start with sample data
      const samplePlans = getSamplePlans();
      console.log('Sample plans loaded:', samplePlans);
      setPlans(samplePlans);
    } catch (error) {
      console.error('Failed to load ConfigCard plans:', error);
      setPlans([]);
    } finally {
      console.log('Setting loading to false');
      setLoading(false);
    }
  };

  const getSamplePlans = (): ConfigCardPlan[] => {
    return [
      {
        id: 'employee-profile-plan',
        name: 'Employee Profiles',
        cardPurpose: 'Employee Profile Management',
        description: 'Manage staff information including job roles, contact details, and work preferences',
        module: 'ADMIN',
        moduleSection: 'User Management',
        securityLevel: 'medium',
        accessLevel: 'managers-and-owners',
        layoutPreference: 'two-columns',
        userPermissions: 'can-edit',
        implemented: false,
        fields: [
          {
            id: 'primary-selection',
            purpose: 'Primary categorization for this record',
            label: 'Job Role',
            fieldType: 'choose-from-list',
            required: true,
            useCase: 'For scheduling, payroll, and compliance reporting',
            options: ['Head Chef', 'Sous Chef', 'Line Cook', 'Kitchen Hand', 'Front of House', 'Manager'],
            defaultValue: 'Kitchen Hand'
          },
          {
            id: 'custom-notes',
            purpose: 'Additional custom information',
            label: 'Additional Notes',
            fieldType: 'long-text',
            required: false,
            useCase: 'For specific details, certifications, or special requirements',
            helpText: 'Add any additional information relevant to this employee'
          }
        ]
      }
    ];
  };

  const handleNewPlan = () => {
    const newPlan: ConfigCardPlan = {
      id: '',
      name: '',
      cardPurpose: '',
      description: '',
      module: 'ADMIN',
      moduleSection: '',
      securityLevel: 'medium',
      accessLevel: 'managers-and-owners',
      layoutPreference: 'simple-form',
      userPermissions: 'can-edit',
      fields: [
        {
          id: 'primary-selection',
          purpose: 'Primary categorization for this record',
          label: 'Primary Selection',
          fieldType: 'choose-from-list',
          required: true,
          useCase: 'Main categorization field',
          options: ['Option 1', 'Option 2', 'Option 3'],
          defaultValue: 'Option 1'
        },
        {
          id: 'custom-notes',
          purpose: 'Additional custom information',
          label: 'Additional Notes',
          fieldType: 'long-text',
          required: false,
          useCase: 'For specific details not covered by the dropdown',
          helpText: 'Add any additional information or special notes'
        }
      ],
      implemented: false
    };
    setEditingPlan(newPlan);
    setIsNewPlan(true);
  };

  const handleEditPlan = (plan: ConfigCardPlan) => {
    setEditingPlan({ ...plan });
    setIsNewPlan(false);
  };

  const handleSavePlan = () => {
    if (!editingPlan) return;

    let updatedPlans;
    if (isNewPlan) {
      editingPlan.id = editingPlan.name.toLowerCase().replace(/\s+/g, '-') + '-plan';
      updatedPlans = [...plans, editingPlan];
    } else {
      updatedPlans = plans.map(plan => 
        plan.id === editingPlan.id ? editingPlan : plan
      );
    }

    setPlans(updatedPlans);
    setEditingPlan(null);
    setIsNewPlan(false);
  };

  const handleDeletePlan = (planId: string) => {
    if (!confirm('Are you sure you want to delete this ConfigCard plan?')) return;
    setPlans(plans.filter(plan => plan.id !== planId));
  };

  const handleImportExisting = async () => {
    try {
      // Import existing Department ConfigCard as an example
      const departmentPlan: ConfigCardPlan = {
        id: 'department-import',
        name: 'Departments',
        cardPurpose: 'Department Management',
        description: 'Manage organizational departments including Kitchen, Front of House, Bar, Management, and support areas',
        module: 'ADMIN',
        moduleSection: 'Organization',
        securityLevel: 'medium',
        accessLevel: 'managers-and-owners',
        layoutPreference: 'two-columns',
        userPermissions: 'can-edit',
        implemented: true, // Mark as already implemented
        generatedAt: '2024-01-01T00:00:00.000Z',
        sqlGenerated: true,
        configCardGenerated: true,
        fields: [
          {
            id: 'department-selection',
            purpose: 'Select which department this record applies to',
            label: 'Department',
            fieldType: 'choose-from-list',
            required: true,
            useCase: 'For organizational structure and workflow management',
            options: [
              'Kitchen',
              'Front of House', 
              'Bar',
              'Management',
              'Housekeeping',
              'Maintenance',
              'Administration',
              'Events',
              'Delivery',
              'Reception'
            ],
            defaultValue: 'Kitchen',
            helpText: 'Choose the primary department for this record'
          },
          {
            id: 'department-notes',
            purpose: 'Additional department-specific information',
            label: 'Department Notes',
            fieldType: 'long-text',
            required: false,
            useCase: 'For specific details, responsibilities, or special requirements',
            helpText: 'Add any additional information about this department record'
          }
        ]
      };

      // Add to existing plans
      setPlans(prevPlans => [...prevPlans, departmentPlan]);
      
      alert(`✅ Successfully Imported!

Department ConfigCard has been imported into the planner.

You can now:
• Edit the department options
• Modify field labels and descriptions  
• Adjust security and access settings
• Generate updated implementation files

The original Department ConfigCard is marked as "IMPLEMENTED" since it already exists in your system.`);

    } catch (error) {
      console.error('Import failed:', error);
      alert('❌ Import failed. Please try again.');
    }
  };

  const handleAddField = () => {
    const newField: FieldPlan = {
      id: `field-${Date.now()}`,
      purpose: '',
      label: '',
      fieldType: 'text',
      required: false,
      useCase: ''
    };
    setEditingField(newField);
    setIsNewField(true);
  };


  const handleEditField = (field: FieldPlan) => {
    setEditingField({ ...field });
    setIsNewField(false);
  };

  const handleSaveField = () => {
    if (!editingField || !editingPlan) return;

    let updatedFields;
    if (isNewField) {
      updatedFields = [...editingPlan.fields, editingField];
    } else {
      updatedFields = editingPlan.fields.map(field => 
        field.id === editingField.id ? editingField : field
      );
    }

    setEditingPlan({ ...editingPlan, fields: updatedFields });
    setEditingField(null);
    setIsNewField(false);
  };

  const handleDeleteField = (fieldId: string) => {
    if (!editingPlan) return;
    if (!confirm('Are you sure you want to delete this field?')) return;
    
    const updatedFields = editingPlan.fields.filter(field => field.id !== fieldId);
    setEditingPlan({ ...editingPlan, fields: updatedFields });
  };

  const handleGenerateImplementation = async (plan: ConfigCardPlan) => {
    try {
      // Generate implementation files
      const response = await fetch('/api/generate-configcard-implementation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ plan }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate implementation');
      }

      const result = await response.json();
      
      // Mark the plan as implemented
      const updatedPlans = plans.map(p => 
        p.id === plan.id 
          ? { ...p, implemented: true, generatedAt: new Date().toISOString(), sqlGenerated: true, configCardGenerated: true }
          : p
      );
      setPlans(updatedPlans);

      // Show success message with file locations
      alert(`🎉 Implementation Generated Successfully!

Files created:
📄 ${result.sqlFile} - Database migration
📄 ${result.configCardFile} - ConfigCard definition  
📄 ${result.docsFile} - Implementation documentation

All files are ready for deployment!`);

    } catch (error) {
      console.error('Generation failed:', error);
      alert(`❌ Generation Failed

Error: ${error instanceof Error ? error.message : 'Unknown error'}

Please check the console for details.`);
    }
  };

  const getAccessLevelDescription = (level: string) => {
    switch (level) {
      case 'owner-only': return 'Only business owners can access';
      case 'managers-and-owners': return 'Managers and owners can access';
      case 'all-staff': return 'All staff members can access';
      default: return '';
    }
  };

  const getSecurityLevelColor = (level: string) => {
    switch (level) {
      case 'low': return 'text-green-600 bg-green-100 border-green-200';
      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'high': return 'text-red-600 bg-red-100 border-red-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const getModuleColor = (module: string) => {
    switch (module) {
      case 'ADMIN': return 'text-purple-600 bg-purple-100 border-purple-200';
      case 'UPLOAD': return 'text-blue-600 bg-blue-100 border-blue-200';
      case 'DIARY': return 'text-green-600 bg-green-100 border-green-200';
      case 'RECEIPE': return 'text-orange-600 bg-orange-100 border-orange-200';
      case 'STOCK': return 'text-red-600 bg-red-100 border-red-200';
      case 'REPAIRS': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'MENU': return 'text-pink-600 bg-pink-100 border-pink-200';
      case 'STOCKTAKE': return 'text-indigo-600 bg-indigo-100 border-indigo-200';
      default: return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const getPermissionsDescription = (permissions: string) => {
    switch (permissions) {
      case 'view-only': return 'Users can only view information';
      case 'can-edit': return 'Users can add and edit information';
      case 'admin-control': return 'Only admins can modify data';
      default: return '';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-700">Loading ConfigCard Planner</h2>
        </div>
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen bg-cover bg-center bg-no-repeat"
      style={{
        backgroundImage: 'url(https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/backgrounds/CafeBackdrop.jpg)'
      }}
    >
      <div className="min-h-screen bg-black bg-opacity-40">
        <div className="w-full mx-auto px-2 sm:px-4 md:px-6 lg:px-8 xl:max-w-7xl pt-16 pb-8 h-screen overflow-y-auto">
          
          {/* Header */}
          {moduleConfig && (
            <div className="mb-6">
              <ModuleHeader module={moduleConfig} currentPage="configcard-planner" />
            </div>
          )}

          {/* Page Header */}
          <div className={`${getCardStyle('primary')} mb-8`}>
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-white mb-2">
                  ConfigCard Planner
                </h1>
                <p className="text-gray-200">
                  Plan your ConfigCards using business language. Claude will generate the technical implementation.
                </p>
              </div>
              <div className="flex gap-3">
                <button
                  onClick={loadPlans}
                  className={`${getButtonStyle('outline')} px-4 py-2 flex items-center gap-2`}
                >
                  <img 
                    src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/reload.png" 
                    alt="Reload" 
                    className="w-4 h-4"
                  />
                  Reload
                </button>
                <button
                  onClick={handleImportExisting}
                  className={`${getButtonStyle('outline')} px-4 py-2 flex items-center gap-2`}
                >
                  <img 
                    src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/upload.png" 
                    alt="Import" 
                    className="w-4 h-4"
                  />
                  Import Existing
                </button>
                <button
                  onClick={handleNewPlan}
                  className={`${getButtonStyle('primary')} px-6 py-2 font-semibold flex items-center gap-2`}
                >
                  <img 
                    src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/new.png" 
                    alt="New" 
                    className="w-4 h-4"
                  />
                  New ConfigCard Plan
                </button>
              </div>
            </div>
          </div>

          {/* Plans Grid */}
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {plans.map((plan) => (
              <div key={plan.id} className="p-6 border border-gray-200 rounded-lg bg-white hover:shadow-lg transition-shadow">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="font-semibold text-gray-900">{plan.name}</h3>
                      <span className={`text-xs px-2 py-1 rounded border ${getModuleColor(plan.module)}`}>
                        {plan.module}
                      </span>
                      <span className={`text-xs px-2 py-1 rounded border ${getSecurityLevelColor(plan.securityLevel)}`}>
                        {plan.securityLevel.toUpperCase()}
                      </span>
                      {plan.implemented ? (
                        <span className="text-xs px-2 py-1 rounded bg-green-100 text-green-700 border border-green-200">
                          IMPLEMENTED
                        </span>
                      ) : (
                        <span className="text-xs px-2 py-1 rounded bg-blue-100 text-blue-700 border border-blue-200">
                          PLANNING
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-700 mb-1">{plan.cardPurpose}</p>
                    <p className="text-sm text-gray-600 mb-3">{plan.description}</p>
                    <div className="space-y-1 text-xs text-gray-500">
                      <div className="flex items-center gap-1">
                        <img 
                          src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/location.png" 
                          alt="Section" 
                          className="w-3 h-3"
                        />
                        Section: {plan.moduleSection || 'Not specified'}
                      </div>
                      <div className="flex items-center gap-1">
                        <img 
                          src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/security.png" 
                          alt="Security" 
                          className="w-3 h-3"
                        />
                        {getAccessLevelDescription(plan.accessLevel)}
                      </div>
                      <div className="flex items-center gap-1">
                        <img 
                          src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/permissions.png" 
                          alt="Permissions" 
                          className="w-3 h-3"
                        />
                        {getPermissionsDescription(plan.userPermissions)}
                      </div>
                      <div className="flex items-center gap-1">
                        <img 
                          src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/layout.png" 
                          alt="Layout" 
                          className="w-3 h-3"
                        />
                        Layout: {plan.layoutPreference.replace('-', ' ')}
                      </div>
                      <div className="flex items-center gap-1">
                        <img 
                          src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/fields.png" 
                          alt="Fields" 
                          className="w-3 h-3"
                        />
                        Fields: {plan.fields.length}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Fields Preview */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Planned Fields:</h4>
                  <div className="space-y-1">
                    {plan.fields.slice(0, 3).map((field) => (
                      <div key={field.id} className="text-xs text-gray-600 flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-400 rounded-full"></span>
                        <span>{field.label}</span>
                        <span className="text-gray-400">({field.fieldType.replace('-', ' ')})</span>
                        {field.required && <span className="text-red-500">*</span>}
                      </div>
                    ))}
                    {plan.fields.length > 3 && (
                      <div className="text-xs text-gray-400">+ {plan.fields.length - 3} more...</div>
                    )}
                    {plan.fields.length === 0 && (
                      <div className="text-xs text-gray-400 italic">No fields planned yet</div>
                    )}
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="space-y-2">
                  {!plan.implemented && (
                    <button
                      onClick={() => handleGenerateImplementation(plan)}
                      className="w-full px-3 py-2 text-sm bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded hover:from-purple-600 hover:to-purple-700 font-medium flex items-center justify-center gap-2"
                      disabled={plan.fields.length === 0}
                    >
                      <img 
                        src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/target.png" 
                        alt="Generate" 
                        className="w-4 h-4"
                      />
                      Generate Implementation
                    </button>
                  )}
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => handleEditPlan(plan)}
                      className="flex-1 px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded hover:bg-blue-100"
                    >
                      Edit Plan
                    </button>
                    <button
                      onClick={() => handleDeletePlan(plan.id)}
                      className="px-3 py-1 text-xs bg-red-50 text-red-600 rounded hover:bg-red-100"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Planning Guide */}
          <div className={`${getCardStyle('secondary', 'light')} mt-8`}>
            <h2 className="text-xl font-bold text-white mb-4">How ConfigCard Planning Works</h2>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div className="p-4 bg-blue-100 rounded-lg">
                <div className="font-medium text-blue-800 mb-1">1. Plan Your ConfigCard</div>
                <div className="text-blue-700">
                  Describe what you want in business language - no technical knowledge needed.
                </div>
              </div>
              <div className="p-4 bg-purple-100 rounded-lg">
                <div className="font-medium text-purple-800 mb-1">2. Claude Generates</div>
                <div className="text-purple-700">
                  Claude creates the database schema, ConfigCard definition, and documentation.
                </div>
              </div>
              <div className="p-4 bg-green-100 rounded-lg">
                <div className="font-medium text-green-800 mb-1">3. Ready to Deploy</div>
                <div className="text-green-700">
                  Get production-ready SQL files and ConfigCard implementations.
                </div>
              </div>
            </div>
          </div>

          {/* Plan Editor Modal */}
          {editingPlan && (
            <ConfigCardPlannerModal
              plan={editingPlan}
              isNew={isNewPlan}
              onSave={handleSavePlan}
              onCancel={() => {
                setEditingPlan(null);
                setIsNewPlan(false);
              }}
              onChange={setEditingPlan}
              onAddField={handleAddField}
              onEditField={handleEditField}
              onDeleteField={handleDeleteField}
            />
          )}

          {/* Field Editor Modal */}
          {editingField && editingPlan && (
            <FieldPlannerModal
              field={editingField}
              isNew={isNewField}
              onSave={handleSaveField}
              onCancel={() => {
                setEditingField(null);
                setIsNewField(false);
              }}
              onChange={setEditingField}
            />
          )}

        </div>
      </div>
    </div>
  );
}

// Plan Editor Modal Component
interface ConfigCardPlannerModalProps {
  plan: ConfigCardPlan;
  isNew: boolean;
  onSave: () => void;
  onCancel: () => void;
  onChange: (plan: ConfigCardPlan) => void;
  onAddField: () => void;
  onEditField: (field: FieldPlan) => void;
  onDeleteField: (fieldId: string) => void;
}

function ConfigCardPlannerModal({ 
  plan, 
  isNew, 
  onSave, 
  onCancel, 
  onChange, 
  onAddField, 
  onEditField, 
  onDeleteField
}: ConfigCardPlannerModalProps) {
  const updatePlan = (updates: Partial<ConfigCardPlan>) => {
    onChange({ ...plan, ...updates });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl md:max-w-4xl lg:max-w-5xl xl:max-w-6xl max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <h2 className={`${getTextStyle('sectionTitle', 'light')} mb-6 text-gray-900`}>
            {isNew ? 'Plan New ConfigCard' : 'Edit ConfigCard Plan'}
          </h2>

          <div className="space-y-6">
            {/* ConfigCard Name and Purpose */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ConfigCard Name *
                </label>
                <input
                  type="text"
                  value={plan.name}
                  onChange={(e) => updatePlan({ name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g. Employee Profiles, Customer Details"
                />
                <p className="text-xs text-gray-500 mt-1">Short name for this ConfigCard</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  What is this ConfigCard for? *
                </label>
                <input
                  type="text"
                  value={plan.cardPurpose}
                  onChange={(e) => updatePlan({ cardPurpose: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g. Employee Profile Management, Customer Information"
                />
                <p className="text-xs text-gray-500 mt-1">Describe the main purpose</p>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Business Description *
              </label>
              <textarea
                value={plan.description}
                onChange={(e) => updatePlan({ description: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                rows={3}
                placeholder="Explain what this ConfigCard will be used for and why it's important to your business..."
              />
            </div>

            {/* Module and Security Configuration */}
            <div className="grid grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Which module will this be used in? *
                </label>
                <select
                  value={plan.module}
                  onChange={(e) => updatePlan({ module: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="ADMIN">Admin Module</option>
                  <option value="UPLOAD">Upload Module</option>
                  <option value="DIARY">Diary Module</option>
                  <option value="RECEIPE">Recipe Module</option>
                  <option value="STOCK">Stock Module</option>
                  <option value="REPAIRS">Repairs Module</option>
                  <option value="MENU">Menu Module</option>
                  <option value="STOCKTAKE">Stocktake Module</option>
                </select>
                <p className="text-xs text-gray-500 mt-1">Future-proofing for module organization</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Module Section
                </label>
                <input
                  type="text"
                  value={plan.moduleSection}
                  onChange={(e) => updatePlan({ moduleSection: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g. User Management, Settings, Reports"
                />
                <p className="text-xs text-gray-500 mt-1">Which part of the module (optional)</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Security Level *
                </label>
                <select
                  value={plan.securityLevel}
                  onChange={(e) => updatePlan({ securityLevel: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="low">Low - General information</option>
                  <option value="medium">Medium - Business sensitive</option>
                  <option value="high">High - Confidential data</option>
                </select>
                <p className="text-xs text-gray-500 mt-1">Data sensitivity classification</p>
              </div>
            </div>

            {/* Access and Permissions */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Who can access this?
                </label>
                <select
                  value={plan.accessLevel}
                  onChange={(e) => updatePlan({ accessLevel: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="owner-only">Only business owners</option>
                  <option value="managers-and-owners">Managers and owners</option>
                  <option value="all-staff">All staff members</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  What can users do?
                </label>
                <select
                  value={plan.userPermissions}
                  onChange={(e) => updatePlan({ userPermissions: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="view-only">View information only</option>
                  <option value="can-edit">Can add and edit information</option>
                  <option value="admin-control">Only admins can modify</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  How should it look?
                </label>
                <select
                  value={plan.layoutPreference}
                  onChange={(e) => updatePlan({ layoutPreference: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="simple-form">Simple form (one column)</option>
                  <option value="two-columns">Two columns</option>
                  <option value="grid-layout">Grid layout</option>
                </select>
              </div>
            </div>

            {/* Fields Planning */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">ConfigCard Fields (Standard: 2 fields)</h3>
              </div>

              {/* Standard Fields Info */}
              <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <h4 className="text-sm font-medium text-green-800 mb-2 flex items-center gap-2">
                  <img 
                    src="https://rggdywqnvpuwssluzfud.supabase.co/storage/v1/object/public/module-assets/icons/fields.png" 
                    alt="Fields" 
                    className="w-4 h-4"
                  />
                  Standard ConfigCard Structure
                </h4>
                <div className="text-sm text-green-700">
                  <p>Every ConfigCard contains exactly 2 fields:</p>
                  <div className="mt-2 ml-4">
                    <p>• <strong>Multi-select dropdown</strong> - Primary categorization with predefined options</p>
                    <p>• <strong>Custom notes field</strong> - Additional details and specific information</p>
                  </div>
                  <p className="mt-2 text-xs text-green-600">All data is stored in client tables for consistency.</p>
                </div>
              </div>

              {plan.fields.length > 0 && (
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {plan.fields.map((field) => (
                    <div key={field.id} className="p-3 border border-gray-200 rounded bg-gray-50">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-medium text-gray-900">{field.label}</span>
                            <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                              {field.fieldType.replace('-', ' ')}
                            </span>
                            {field.required && (
                              <span className="text-xs bg-red-100 text-red-700 px-2 py-1 rounded">
                                Required
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mb-1">{field.purpose}</p>
                          <p className="text-xs text-gray-500">{field.useCase}</p>
                        </div>
                        <div className="flex gap-2 ml-3">
                          <button
                            onClick={() => onEditField(field)}
                            className="text-xs px-2 py-1 bg-blue-50 text-blue-600 rounded hover:bg-blue-100"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => onDeleteField(field.id)}
                            className="text-xs px-2 py-1 bg-red-50 text-red-600 rounded hover:bg-red-100"
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex justify-end gap-3 mt-6 pt-4 border-t">
            <button
              onClick={onCancel}
              className={`${getButtonStyle('outline')} px-4 py-2`}
            >
              Cancel
            </button>
            <button
              onClick={onSave}
              className={`${getButtonStyle('primary')} px-6 py-2 font-semibold`}
              disabled={!plan.name || !plan.cardPurpose || !plan.description}
            >
              {isNew ? 'Save Plan' : 'Update Plan'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// Field Planner Modal Component
interface FieldPlannerModalProps {
  field: FieldPlan;
  isNew: boolean;
  onSave: () => void;
  onCancel: () => void;
  onChange: (field: FieldPlan) => void;
}

function FieldPlannerModal({ field, isNew, onSave, onCancel, onChange }: FieldPlannerModalProps) {
  const updateField = (updates: Partial<FieldPlan>) => {
    onChange({ ...field, ...updates });
  };

  const fieldTypes = [
    { value: 'text', label: 'Text (short answer)' },
    { value: 'long-text', label: 'Long text (paragraph)' },
    { value: 'number', label: 'Number' },
    { value: 'date', label: 'Date' },
    { value: 'choose-from-list', label: 'Choose from list' },
    { value: 'yes-no', label: 'Yes/No' }
  ];

  const addOption = () => {
    const newOptions = field.options || [];
    newOptions.push('');
    updateField({ options: newOptions });
  };

  const updateOption = (index: number, value: string) => {
    const newOptions = [...(field.options || [])];
    newOptions[index] = value;
    updateField({ options: newOptions });
  };

  const removeOption = (index: number) => {
    const newOptions = [...(field.options || [])];
    newOptions.splice(index, 1);
    updateField({ options: newOptions });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <h2 className={`${getTextStyle('sectionTitle', 'light')} mb-6 text-gray-900`}>
            {isNew ? 'Plan New Field' : 'Edit Field Plan'}
          </h2>

          <div className="space-y-6">
            {/* Field Purpose */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                What information does this field collect? *
              </label>
              <input
                type="text"
                value={field.purpose}
                onChange={(e) => updateField({ purpose: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="e.g. Employee's job role, Customer's phone number, Supplier contact person"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Field Label (what users see) *
                </label>
                <input
                  type="text"
                  value={field.label}
                  onChange={(e) => updateField({ label: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g. Job Role, Phone Number, Contact Person"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  What type of information? *
                </label>
                <select
                  value={field.fieldType}
                  onChange={(e) => updateField({ fieldType: e.target.value as any })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {fieldTypes.map((type) => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                When would this information be used?
              </label>
              <textarea
                value={field.useCase}
                onChange={(e) => updateField({ useCase: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                rows={2}
                placeholder="e.g. For scheduling shifts, For compliance reports, For emergency contact..."
              />
            </div>

            <div className="flex items-center">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={field.required}
                  onChange={(e) => updateField({ required: e.target.checked })}
                  className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span className="text-sm font-medium text-gray-700">This information is required</span>
              </label>
            </div>

            {/* Options for Choose-from-list */}
            {field.fieldType === 'choose-from-list' && (
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-medium text-gray-900">List Options</h3>
                  <button
                    onClick={addOption}
                    className={`${getButtonStyle('outline')} px-3 py-1 text-sm`}
                  >
                    + Add Option
                  </button>
                </div>

                {field.options && field.options.length > 0 ? (
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {field.options.map((option, index) => (
                      <div key={index} className="flex items-center gap-3">
                        <input
                          type="text"
                          value={option}
                          onChange={(e) => updateOption(index, e.target.value)}
                          placeholder={`Option ${index + 1}`}
                          className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                        <button
                          onClick={() => removeOption(index)}
                          className="text-red-600 hover:text-red-800 px-2"
                        >
                          Remove
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-6 text-gray-500">
                    <p>No options defined</p>
                    <p className="text-sm">Click "Add Option" to create choices for this field</p>
                  </div>
                )}
              </div>
            )}

            {/* Default Value */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Default Value (optional)
              </label>
              {field.fieldType === 'yes-no' ? (
                <select
                  value={field.defaultValue || 'no'}
                  onChange={(e) => updateField({ defaultValue: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="no">No</option>
                  <option value="yes">Yes</option>
                </select>
              ) : field.fieldType === 'choose-from-list' && field.options ? (
                <select
                  value={field.defaultValue || ''}
                  onChange={(e) => updateField({ defaultValue: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">No default</option>
                  {field.options.map((option, index) => (
                    <option key={index} value={option}>
                      {option}
                    </option>
                  ))}
                </select>
              ) : (
                <input
                  type={field.fieldType === 'number' ? 'number' : field.fieldType === 'date' ? 'date' : 'text'}
                  value={field.defaultValue || ''}
                  onChange={(e) => updateField({ defaultValue: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter default value..."
                />
              )}
            </div>

            {/* Help Text */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Help Text (shown to users)
              </label>
              <input
                type="text"
                value={field.helpText || ''}
                onChange={(e) => updateField({ helpText: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="e.g. Choose the primary role for this employee"
              />
            </div>
          </div>

          <div className="flex justify-end gap-3 mt-6 pt-4 border-t">
            <button
              onClick={onCancel}
              className={`${getButtonStyle('outline')} px-4 py-2`}
            >
              Cancel
            </button>
            <button
              onClick={onSave}
              className={`${getButtonStyle('primary')} px-6 py-2 font-semibold`}
              disabled={!field.purpose || !field.label}
            >
              {isNew ? 'Add Field' : 'Save Changes'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}