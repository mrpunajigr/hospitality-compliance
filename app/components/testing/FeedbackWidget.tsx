'use client'

import { useState, useEffect } from 'react'
import { usePathname } from 'next/navigation'

interface FeedbackNote {
  note: string
  timestamp: string
  severity: 'low' | 'medium' | 'high' | 'critical'
  category: 'bug' | 'ui' | 'ux' | 'performance' | 'suggestion'
}

interface AllNotes {
  [path: string]: FeedbackNote[]
}

export const FeedbackWidget = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [notes, setNotes] = useState('')
  const [severity, setSeverity] = useState<FeedbackNote['severity']>('medium')
  const [category, setCategory] = useState<FeedbackNote['category']>('suggestion')
  const [allNotes, setAllNotes] = useState<AllNotes>({})
  const [isTester, setIsTester] = useState(false)
  const [testerId, setTesterId] = useState('')
  const pathname = usePathname()
  
  useEffect(() => {
    // Check if in testing mode
    const params = new URLSearchParams(window.location.search)
    const testMode = params.get('testing') === 'true'
    const testerIdParam = params.get('testerId') || 'anonymous'
    
    setIsTester(testMode)
    setTesterId(testerIdParam)
    
    if (testMode) {
      // Load saved notes from localStorage
      const savedNotes = localStorage.getItem(`TesterFeedbackNotes_${testerIdParam}`)
      if (savedNotes) {
        try {
          setAllNotes(JSON.parse(savedNotes))
        } catch (error) {
          console.warn('Failed to parse saved feedback notes:', error)
        }
      }
    }
  }, [])
  
  // Don't render if not in testing mode
  if (!isTester) return null
  
  const saveNote = () => {
    if (!notes.trim()) return
    
    const newNote: FeedbackNote = {
      note: notes.trim(),
      timestamp: new Date().toISOString(),
      severity,
      category
    }
    
    const updatedNotes = {
      ...allNotes,
      [pathname]: [...(allNotes[pathname] || []), newNote]
    }
    
    setAllNotes(updatedNotes)
    localStorage.setItem(`TesterFeedbackNotes_${testerId}`, JSON.stringify(updatedNotes))
    setNotes('')
    setIsOpen(false)
    
    // Show confirmation
    const confirmationEl = document.createElement('div')
    confirmationEl.textContent = '✅ Note saved!'
    confirmationEl.style.cssText = `
      position: fixed;
      bottom: 100px;
      right: 20px;
      background: #10B981;
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      z-index: 10000;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `
    document.body.appendChild(confirmationEl)
    setTimeout(() => document.body.removeChild(confirmationEl), 2000)
  }
  
  const sendAllFeedback = () => {
    const totalNotes = Object.values(allNotes).reduce((sum, pageNotes) => sum + pageNotes.length, 0)
    
    if (totalNotes === 0) {
      alert('No feedback notes to send. Add some notes first!')
      return
    }
    
    const feedbackData = {
      testerId: testerId,
      device: 'iPad Air Safari 12',
      timestamp: new Date().toISOString(),
      appVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.11.1',
      totalPages: Object.keys(allNotes).length,
      totalNotes: totalNotes,
      feedback: allNotes
    }
    
    const subject = `JiGR Testing Feedback - ${feedbackData.testerId} (${totalNotes} notes)`
    const body = `
JiGR Hospitality Compliance Platform - Tester Feedback Report

=== FEEDBACK SUMMARY ===
Tester ID: ${feedbackData.testerId}
Device: ${feedbackData.device}
App Version: ${feedbackData.appVersion}
Testing Date: ${new Date(feedbackData.timestamp).toLocaleDateString('en-NZ')}
Total Pages Reviewed: ${feedbackData.totalPages}
Total Notes: ${feedbackData.totalNotes}

=== DETAILED FEEDBACK ===

${Object.entries(allNotes).map(([path, pageNotes]) => `
PAGE: ${path}
${pageNotes.map((note, index) => `
  Note ${index + 1}:
  Category: ${note.category.toUpperCase()}
  Severity: ${note.severity.toUpperCase()}
  Time: ${new Date(note.timestamp).toLocaleString('en-NZ')}
  Feedback: ${note.note}
`).join('\n')}
`).join('\n')}

=== RAW DATA (for processing) ===
${JSON.stringify(feedbackData, null, 2)}

---
Generated by JiGR Testing Feedback System
    `.trim()
    
    // Create mailto link
    const mailtoLink = `mailto:dev@jigr.app?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`
    
    // Open email client
    window.location.href = mailtoLink
  }
  
  const clearAllNotes = () => {
    if (!confirm('Are you sure you want to clear all your feedback notes? This cannot be undone.')) {
      return
    }
    
    setAllNotes({})
    localStorage.removeItem(`TesterFeedbackNotes_${testerId}`)
    setIsOpen(false)
    
    // Show confirmation
    const confirmationEl = document.createElement('div')
    confirmationEl.textContent = '🗑️ All notes cleared!'
    confirmationEl.style.cssText = `
      position: fixed;
      bottom: 100px;
      right: 20px;
      background: #EF4444;
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 14px;
      z-index: 10000;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `
    document.body.appendChild(confirmationEl)
    setTimeout(() => document.body.removeChild(confirmationEl), 2000)
  }
  
  const pageNotesCount = allNotes[pathname]?.length || 0
  const totalNotesCount = Object.values(allNotes).reduce((sum, pageNotes) => sum + pageNotes.length, 0)
  
  return (
    <div style={{ position: 'fixed', bottom: '20px', right: '20px', zIndex: 1000 }}>
      {/* Floating Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        style={{
          background: '#3B82F6',
          color: 'white',
          border: 'none',
          borderRadius: '12px',
          padding: '12px 16px',
          fontSize: '14px',
          fontWeight: '600',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
          cursor: 'pointer',
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}
      >
        📝 Testing Feedback
        {totalNotesCount > 0 && (
          <span style={{
            background: '#EF4444',
            color: 'white',
            borderRadius: '50%',
            width: '20px',
            height: '20px',
            fontSize: '12px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}>
            {totalNotesCount}
          </span>
        )}
      </button>
      
      {/* Feedback Panel */}
      {isOpen && (
        <div style={{
          position: 'absolute',
          bottom: '60px',
          right: '0',
          background: 'rgba(255, 255, 255, 0.95)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          borderRadius: '16px',
          padding: '20px',
          width: '320px',
          maxHeight: '500px',
          overflowY: 'auto',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.15)',
          backdropFilter: 'blur(10px)',
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
        }}>
          {/* Header */}
          <div style={{ marginBottom: '16px' }}>
            <h3 style={{ 
              margin: '0 0 4px 0', 
              fontSize: '16px', 
              fontWeight: '600', 
              color: '#1F2937' 
            }}>
              Page Feedback
            </h3>
            <p style={{ 
              margin: '0', 
              fontSize: '12px', 
              color: '#6B7280',
              wordBreak: 'break-all'
            }}>
              {pathname}
            </p>
            <p style={{ 
              margin: '4px 0 0 0', 
              fontSize: '12px', 
              color: '#6B7280'
            }}>
              Tester: {testerId} | Notes on this page: {pageNotesCount}
            </p>
          </div>
          
          {/* Note Input */}
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="Describe any issues, suggestions, or observations about this page..."
            style={{
              width: '100%',
              padding: '12px',
              border: '1px solid #D1D5DB',
              borderRadius: '8px',
              fontSize: '14px',
              resize: 'vertical',
              minHeight: '80px',
              marginBottom: '12px',
              fontFamily: 'inherit'
            }}
          />
          
          {/* Category and Severity */}
          <div style={{ display: 'flex', gap: '8px', marginBottom: '16px' }}>
            <select
              value={category}
              onChange={(e) => setCategory(e.target.value as FeedbackNote['category'])}
              style={{
                flex: 1,
                padding: '8px',
                border: '1px solid #D1D5DB',
                borderRadius: '6px',
                fontSize: '12px',
                fontFamily: 'inherit'
              }}
            >
              <option value="suggestion">Suggestion</option>
              <option value="bug">Bug</option>
              <option value="ui">UI Issue</option>
              <option value="ux">UX Issue</option>
              <option value="performance">Performance</option>
            </select>
            
            <select
              value={severity}
              onChange={(e) => setSeverity(e.target.value as FeedbackNote['severity'])}
              style={{
                flex: 1,
                padding: '8px',
                border: '1px solid #D1D5DB',
                borderRadius: '6px',
                fontSize: '12px',
                fontFamily: 'inherit'
              }}
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
              <option value="critical">Critical</option>
            </select>
          </div>
          
          {/* Action Buttons */}
          <div style={{ display: 'flex', gap: '8px', marginBottom: '16px' }}>
            <button
              onClick={saveNote}
              disabled={!notes.trim()}
              style={{
                flex: 1,
                background: notes.trim() ? '#10B981' : '#9CA3AF',
                color: 'white',
                border: 'none',
                padding: '10px',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: notes.trim() ? 'pointer' : 'not-allowed',
                fontFamily: 'inherit'
              }}
            >
              Save Note
            </button>
            
            <button
              onClick={sendAllFeedback}
              disabled={totalNotesCount === 0}
              style={{
                flex: 1,
                background: totalNotesCount > 0 ? '#3B82F6' : '#9CA3AF',
                color: 'white',
                border: 'none',
                padding: '10px',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: totalNotesCount > 0 ? 'pointer' : 'not-allowed',
                fontFamily: 'inherit'
              }}
            >
              Send All ({totalNotesCount})
            </button>
          </div>
          
          {/* Clear Notes Button */}
          {totalNotesCount > 0 && (
            <button
              onClick={clearAllNotes}
              style={{
                width: '100%',
                background: '#EF4444',
                color: 'white',
                border: 'none',
                padding: '8px',
                borderRadius: '6px',
                fontSize: '12px',
                fontWeight: '500',
                cursor: 'pointer',
                marginBottom: '16px',
                fontFamily: 'inherit'
              }}
            >
              Clear All Notes
            </button>
          )}
          
          {/* Show existing notes for this page */}
          {pageNotesCount > 0 && (
            <div style={{
              borderTop: '1px solid #E5E7EB',
              paddingTop: '12px'
            }}>
              <p style={{
                margin: '0 0 8px 0',
                fontSize: '12px',
                fontWeight: '600',
                color: '#1F2937'
              }}>
                Notes for this page:
              </p>
              {allNotes[pathname]?.map((note, index) => (
                <div
                  key={index}
                  style={{
                    fontSize: '12px',
                    marginBottom: '8px',
                    padding: '8px',
                    background: '#F3F4F6',
                    borderRadius: '6px',
                    borderLeft: `3px solid ${
                      note.severity === 'critical' ? '#EF4444' :
                      note.severity === 'high' ? '#F59E0B' :
                      note.severity === 'medium' ? '#3B82F6' : '#10B981'
                    }`
                  }}
                >
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    marginBottom: '4px'
                  }}>
                    <span style={{ 
                      fontWeight: '500',
                      color: '#1F2937',
                      fontSize: '11px'
                    }}>
                      {note.category.toUpperCase()} - {note.severity.toUpperCase()}
                    </span>
                    <span style={{ 
                      color: '#6B7280',
                      fontSize: '10px'
                    }}>
                      {new Date(note.timestamp).toLocaleTimeString('en-NZ', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>
                  <div style={{ color: '#1F2937' }}>
                    {note.note}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  )
}