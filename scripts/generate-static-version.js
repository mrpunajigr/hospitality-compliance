const fs = require('fs');
const path = require('path');

function generateStaticVersion() {
  const versionPath = path.join(__dirname, '../version.json');
  
  let versionData = {
    major: 1,
    month: 8,
    day: 12,
    build: 4,
    alpha: '',
    lastBuildDate: new Date().toDateString()
  };
  
  // Read current version if it exists
  if (fs.existsSync(versionPath)) {
    versionData = JSON.parse(fs.readFileSync(versionPath, 'utf8'));
  }
  
  // Generate static version file
  const libDir = path.join(__dirname, '../lib');
  if (!fs.existsSync(libDir)) {
    fs.mkdirSync(libDir, { recursive: true });
  }
  const staticVersionPath = path.join(__dirname, '../lib/version-static.ts');
  const content = `// Static version - generated at build time for Netlify deployment
// This file is auto-generated by scripts/generate-static-version.js

export const STATIC_VERSION = {
  major: ${versionData.major},
  month: ${versionData.month},
  day: ${versionData.day},
  build: ${versionData.build},
  alpha: '${versionData.alpha}',
  buildDate: '${new Date().toISOString().split('T')[0]}',
  timestamp: ${Date.now()}
}

export const getStaticVersion = () => {
  const { major, month, day, build, alpha } = STATIC_VERSION
  return \`v\${major}.\${month}.\${day}.\${String(build).padStart(3, '0')}\${alpha}\`
}
`;
  
  fs.writeFileSync(staticVersionPath, content);
  
  console.log(`ðŸ“¦ Static version ${getStaticVersion()} generated for Netlify deployment`);
}

function getStaticVersion() {
  const versionPath = path.join(__dirname, '../version.json');
  let versionData = { major: 1, month: 8, day: 12, build: 4, alpha: '' };
  
  if (fs.existsSync(versionPath)) {
    versionData = JSON.parse(fs.readFileSync(versionPath, 'utf8'));
  }
  
  return `v${versionData.major}.${versionData.month}.${versionData.day}.${String(versionData.build).padStart(3, '0')}${versionData.alpha}`;
}

generateStaticVersion();